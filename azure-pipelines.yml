# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger: none

pool:
  vmImage: ubuntu-latest
variables:
  - group: dev-demo
  - name: buildConfiguration
    value: Release
  - name: serviceName
    value: jfrom service connection
  - name: dotnetSdkVersion
    value: '5.x'

stages:
- stage: Build
  displayName: 'Build'
  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs:
  - job: 'Build'
    displayName: 'LIB_BUILD Deployment'
    steps:    
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
          version: '$(dotnetSdkVersion)'
    
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: build
          projects: '**/*.csproj'
          arguments: '--configuration $(buildConfiguration)'
          version: '$(dotnetSdkVersion)'
    
      - task: DotNetCoreCLI@2
        displayName: Test execution
        inputs:
          command: test
          projects: '**/*Tests/*.csproj'
          arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
          version: '$(dotnetSdkVersion)'

- stage: Development
  dependsOn: Build
  condition: and(succeeded(), variables['Build.Reason'], 'PullRequest')
  jobs:
  - deployment: LIB_DEVELOPMENT
    displayName: 'LIB_DEVELOPMENT Deployment'
    environment: LIB_DEVELOPMENT
    strategy:
      runOnce:
        deploy:
          steps:
            - script: echo Build Starting...
              displayName: 'Run a one-line script'
            - task: Docker@2
              inputs:
                command: 'build'
                Dockerfile: '**/Dockerfile'
                repository: $(imageName)   

            #- task: ArtifactoryDocker@1
            #  inputs:
            #    artifactoryService: '$(serviceName)'
            #    command: 'push'
            #    imageName: '$(imageName)' 